<#
InstallSQLServer2019-Standalone.ps1

This script:            Installs SQL Server 2019, Current CU or Sp & SSMS
Before running:         Edit the variables as necessary (lines 33-165). 
                            Copy the SQL Server Management Studio (SSMS-Setup-ENU.exe) & Current CU or SP files to $folderpath in advance.
Usage:                  Run this script in Powershell ISE as administrator, on the server which you want to install a standalone default instance of SQL Server 2019.
                            You must be a local admin on the server
#>
#Summary.txt file located at C:\Program Files\Microsoft SQL Server\150\Setup Bootstrap\Log

###################################################################################################
#Check disk block size
#CLS
$wql = "SELECT Label, Blocksize, Name FROM Win32_Volume WHERE FileSystem='NTFS'" 
Get-WmiObject -Query $wql -ComputerName '.' | Select-Object Label, Blocksize, Name

###################################################################################################
#Give the user a chance to review the output messages and quit the install
Write-Host "You are about to install the SQL Server Powershell module. Do you want to continue the install? (Y/N)" -ForegroundColor Yellow
$response = Read-Host
if ( $response -ne "Y" ) { break; }

###################################################################################################
#Install the SQLPS module
Install-Module -Name SqlServer
Import-Module -Name SQLPS
###################################################################################################
#Below variables are customizable. These should be validated and changed if needed
###################################################################################################
#Next line sets installer as a SQL sysadmin, this should be a SQL DBA group
$SQLAdminGroup="AXISSPECIALTY\Servers - SQL Server - Administrators" 

#Credientials
 #Agent Account
  $AGTSVCACCOUNT="AXISSPECIALTY\service-ussql-dev"
  $AGTSVCSTARTUPTYPE="Automatic"
  $AGTSVCPASSWORD=$('strongpassword')
 #SQL Service Account
  $SQLSVCACCOUNT="AXISSPECIALTY\service-ussql-dev"
  $SQLSVCSTARTUPTYPE="Automatic"
  $SQLSVCPASSWORD=$('strongpassword')
 #Other Service Accounts
  #$SQLTELSVCACCT=$('NT Service\SQLTELEMETRY') #in the case where you are installing a named instance look for instructions in the SOP document
  #$SQLTELSVCACCT=$('NT Service\SQLTELEMETRY$SQL19') #Modify the accountname post $ sign with named instance name
  $SQLTELSVCSTARTUPTYPE="Automatic"
 #SQL SA Account
  $SECURITYMODE="SQL"
  $SAPWD="sapwd"
 #CMDB Permissions - Change this according to what environment this instance will go.
  # HPuCMDB_DBDISC_PROD --> produciton
  # HPuCMDB_DBDISC_DEV --> Development
  # HPuCMDB_DBDISC_UAT --> UAT
  # HPuCMDB_DBDISC_QA  --> QA
  $CMDBLogInCrediential = "HPuCMDB_DBDISC_DEV"

#Choose a SQL Server Edition to install
$SQLInstallEdition = "Developer"
#Choices are:
#Developer
#Standard
#Enterprise

#Location of the PowerShell Install Script (this script)
$PSScriptFolderPath = "D:\SQLServer2019Install\Scripts\SQL2019Install_Standalone"

#Location of other commmon files
$folderpath = "D:\SQLServer2019Install\Scripts\CommonFiles"

#Name and Location of the output configuration file
$inifile = "$folderpath\ConfigurationFile.ini"

#Path to the SQL server 2019 Install media
$SQLsource = "D:\SQLServer2019Install\SQLServer2019"

#SSMS File Name - place the SSMS installer file in the $folderpath
$SSMSFileName = "SSMS-Setup-ENU.exe" #Version 18.4

#SQL Features & Configurations
$FEATURES = "SQLENGINE,CONN,BC,SDK"

$INSTANCENAME = "MSQL19" #in the case where you are installing a named instance look for instructions in the SOP document
$INSTANCEID = "MSQL19" #in the case where you are installing a named instance look for instructions in the SOP document

If($INSTANCENAME -eq 'MSSQLServer')
{ $SQLTELSVCACCT=$('NT Service\SQLTELEMETRY') }
else
{ $SQLTELSVCACCT = $('NT Service\SQLTELEMETRY$' + "$INSTANCENAME") }

#File Directories
$SQLInstallDrive = "C:"
$INSTALLSHAREDDIR = "$SQLInstallDrive\Program Files\Microsoft SQL Server"
$INSTALLSHAREDWOWDIR = "$SQLInstallDrive\Program Files (x86)\Microsoft SQL Server"
$INSTANCEDIR = "$SQLInstallDrive\Program Files\Microsoft SQL Server"

$INSTALLSQLDATADIR = "E:"
$SQLBACKUPDIR = "I:\MSSQL\$INSTANCENAME\BACKUPS"
$SQLUSERDBDIR = "E:\MSSQL\$INSTANCENAME\DATA"
$SQLUSERDBLOGDIR = "F:\MSSQL\$INSTANCENAME\LOGS"
$SQLTEMPDBDIR = "G:\MSSQL\$INSTANCENAME\DATA"
$SQLTEMPDBLOGDIR = "H:\MSSQL\$INSTANCENAME\LOGS"

#Restore AXIS_DBA database
$databasename = "AXIS_DBA"
$databaselogname = "AXIS_DBA_log"
$databasebakfile = "AXIS_DBA.bak"
$databasefile = "AXIS_DBA.mdf"
$databaselogfile = "AXIS_DBA_log.ldf"

#SQL memory
$PhysicalRAM = (Get-WMIObject -class Win32_PhysicalMemory | Measure-Object -Property capacity -Sum | % {[Math]::Round(($_.sum / 1MB),2)})
$SqlMemMin = 1024
$SqlMemMax = $PhysicalRAM *.75

#Configure DB Mail
$accountName = 'AxisDBA'#dbMailDefaultAcct'
$accountDescription = 'Mail account used for Database Mail'#Default dbMail Account'
$originatingAddress = 'AxisDBA@axiccapital.com'#"$sqlServer@yourDomain.com"
$replyToAddress = ''#'DO_NOT_REPLY@yourDomain.com'
$smtpServer = 'smtp.axisspecialty.net'#'smtpServer.yourDomain.com'
$profileName = 'DBMailProfile'#'dbMailDefaultProfile'
$profileDescription = 'Profile used for database mail'#'Default dbMail profile'

#Other configuration info
$IACCEPTROPENLICENSETERMS = "False"
$ACTION = "Install"
$SUPPRESSPRIVACYSTATEMENTNOTICE = "False"
$IACCEPTPYTHONLICENSETERMS = "False"
$ENU = "True"
$QUIET = "True"
$QUIETSIMPLE = "False"
$UpdateEnabled = "False"
$USEMICROSOFTUPDATE = "False"
$UpdateSource = "MU"
$HELP = "False"
$INDICATEPROGRESS = "False"
$COMMFABRICPORT = "0"
$COMMFABRICNETWORKLEVEL = "0"
$COMMFABRICENCRYPTION = "0"
$MATRIXCMBRICKCOMMPORT = "0"
$FILESTREAMLEVEL = "0"
$ENABLERANU = "False"
$SQLCOLLATION = "SQL_Latin1_General_CP1_CI_AS"
$SQLSVCINSTANTFILEINIT = "False"
$SQLSYSADMINACCOUNTS = "$SQLAdminGroup"
$ADDCURRENTUSERASSQLADMIN = "False"
$TCPENABLED = "1"
$NPENABLED = "1"
$BROWSERSVCSTARTUPTYPE = "Disabled"
$IAcceptSQLServerLicenseTerms = "True"
$Date = Get-Date
$X86 = "False"

###################################################################################################
# do not edit below this line
###################################################################################################
#Check to see if Powershell is running as administrator
If (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] “Administrator”))
{
    Write-Warning “You do not have Administrator rights to run this script!`n Please re-run this script as an Administrator!”
    Break;
}

#Find the number of procs for config of MAXDOP and number of temp db files to be created
$cs = Get-WmiObject -class Win32_ComputerSystem
$Cores = $cs.numberoflogicalprocessors
$MAXDOP =
if ($Cores  -lt 8) {$Cores}
elseif ($Cores -ge 8) {8}
else {1}
$NumberOfTempFiles = $MAXDOP

#Temp DB Configurations
$SQLTEMPDBFILECOUNT = $NumberOfTempFiles
$SQLTEMPDBFILESIZE = "1024"
$SQLTEMPDBFILEGROWTH = "512"
$SQLTEMPDBLOGFILESIZE = "2048"
$SQLTEMPDBLOGFILEGROWTH = "1024"

#Output for the SQL Server Configuration file
$conffile= @"
[OPTIONS]
ACTION="$ACTION"
ADDCURRENTUSERASSQLADMIN="$ADDCURRENTUSERASSQLADMIN"
AGTSVCACCOUNT="$AGTSVCACCOUNT"
AGTSVCPASSWORD="$AGTSVCPASSWORD"
AGTSVCSTARTUPTYPE="$AGTSVCSTARTUPTYPE"
BROWSERSVCSTARTUPTYPE="$BROWSERSVCSTARTUPTYPE"
COMMFABRICENCRYPTION="$COMMFABRICENCRYPTION"
COMMFABRICNETWORKLEVEL="$COMMFABRICNETWORKLEVEL"
COMMFABRICPORT="$COMMFABRICPORT"
ENABLERANU="$ENABLERANU"
ENU="$ENU"
FEATURES="$FEATURES"
FILESTREAMLEVEL="$FILESTREAMLEVEL"
HELP="$HELP"
IACCEPTPYTHONLICENSETERMS="$IACCEPTPYTHONLICENSETERMS"
IACCEPTROPENLICENSETERMS="$IACCEPTROPENLICENSETERMS"
IAcceptSQLServerLicenseTerms="$IAcceptSQLServerLicenseTerms"
INDICATEPROGRESS="$INDICATEPROGRESS"
INSTALLSHAREDDIR="$INSTALLSHAREDDIR"
INSTALLSHAREDWOWDIR="$INSTALLSHAREDWOWDIR"
INSTALLSQLDATADIR="$INSTALLSQLDATADIR"
INSTANCEDIR="$INSTANCEDIR"
INSTANCEID="$INSTANCEID"
INSTANCENAME="$INSTANCENAME"
MATRIXCMBRICKCOMMPORT="$MATRIXCMBRICKCOMMPORT"
NPENABLED="$NPENABLED"
QUIET="$QUIET"
QUIETSIMPLE="$QUIETSIMPLE"
SAPWD="$SAPWD"
SECURITYMODE="$SECURITYMODE"
SQLBACKUPDIR="$SQLBACKUPDIR"
SQLCOLLATION="$SQLCOLLATION"
SQLSVCACCOUNT="$SQLSVCACCOUNT"
SQLSVCPASSWORD = "$SQLSVCPASSWORD"
SQLSVCINSTANTFILEINIT="$SQLSVCINSTANTFILEINIT"
SQLSVCSTARTUPTYPE="$SQLSVCSTARTUPTYPE"
SQLSYSADMINACCOUNTS="$SQLSYSADMINACCOUNTS"
SQLTELSVCACCT="$SQLTELSVCACCT"
SQLTELSVCSTARTUPTYPE="$SQLTELSVCSTARTUPTYPE"
SQLTEMPDBDIR="$SQLTEMPDBDIR"
SQLTEMPDBFILECOUNT="$SQLTEMPDBFILECOUNT"
SQLTEMPDBFILEGROWTH="$SQLTEMPDBFILEGROWTH"
SQLTEMPDBFILESIZE="$SQLTEMPDBFILESIZE"
SQLTEMPDBLOGDIR="$SQLTEMPDBLOGDIR"
SQLTEMPDBLOGFILEGROWTH="$SQLTEMPDBLOGFILEGROWTH"
SQLTEMPDBLOGFILESIZE="$SQLTEMPDBLOGFILESIZE"
SQLUSERDBDIR="$SQLUSERDBDIR"
SQLUSERDBLOGDIR="$SQLUSERDBLOGDIR"
SUPPRESSPRIVACYSTATEMENTNOTICE="$SUPPRESSPRIVACYSTATEMENTNOTICE"
TCPENABLED="$TCPENABLED"
UpdateEnabled="$UpdateEnabled"
UpdateSource="$UpdateSource"
USEMICROSOFTUPDATE="$USEMICROSOFTUPDATE"
X86="$X86"
"@
cls

###################################################################################################
#Add accounts to local Windows Admin group
Add-LocalGroupMember -Group "Administrators" -Member $SQLAdminGroup, $SQLSVCACCOUNT

###################################################################################################
#Check for Script Directory & file
$Date = Get-Date
if (Test-Path "$folderpath")
{ Write-Host "The folder '$folderpath' already exists, will not recreate it. $Date" }
else
{ mkdir "$folderpath" }

if (Test-Path "$folderpath\ConfigurationFile.ini")
{
    Write-Host "The file '$folderpath\ConfigurationFile.ini' already exists, removing... $Date"
    Remove-Item -Path "$folderpath\ConfigurationFile.ini" -Force
}
else{}

# Create file:
Write-Host "Creating '$folderpath\ConfigurationFile.ini'..."
New-Item -Path "$folderpath\ConfigurationFile.ini" -ItemType File -Value $Conffile

###################################################################################################
#Give the user a chance to review the output messages and quit the install
Write-Host "Please review any error messages above. You are about to install SQL Server 2019 $SQLInstallEdition edition on this server. Do you want to continue the install? (Y/N) "-ForegroundColor Green
$response = Read-Host
if ( $response -ne "Y" ) { break; }

$Date = Get-Date
Write-Host "about to install SQL Server 2019 $SQLInstallEdition edition... $Date" -ForegroundColor Green

###################################################################################################
#Start the SQL installer
Try
{
    if (Test-Path $SQLsource)
    {
        Write-Host "installing SQL Server 2019 $SQLInstallEdition edition..."
        $fileExe =  "$SQLsource\setup.exe"
        $CONFIGURATIONFILE = "$folderpath\ConfigurationFile.ini"
        & $fileExe  /CONFIGURATIONFILE=$CONFIGURATIONFILE
        $Date = Get-Date
        Write-Host "Review any error messages above and verify SQL Server 2019 has been installed.. $Date" -ForegroundColor Green
    }
    else
    {
        write-warning "Could not find the media for SQL Server 2019..."
        break;
    }
}
catch
{
    write-warning "Something went wrong with the installation of SQL Server 2019, aborting."
    break
}

###################################################################################################
#Give the user a chance to review the output messages and quit the install
Write-Host "Please review any error messages above. You are about to execute post sql install items. Do you want to continue the install? (Y/N) "-ForegroundColor Green
$response = Read-Host
if ( $response -ne "Y" ) { break; }
$Date = Get-Date
Write-Host "about to install SQL Server 2019 post configurations $Date" -ForegroundColor Green

###################################################################################################
#Change SQL Server configuration options
$Date = Get-Date
[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null
[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SMO') | Out-Null

if ($instancename -eq "MSSQLSERVER")
{ $svr = New-Object ('Microsoft.SqlServer.Management.Smo.Server') ("(local)") }
else
{ $svr = New-Object ('Microsoft.SqlServer.Management.Smo.Server') ("localhost\$instancename") }

$svr.Configuration.DatabaseMailEnabled.ConfigValue = 1
$svr.Configuration.AdHocDistributedQueriesEnabled.ConfigValue = 1
$svr.Configuration.XPCmdShellEnabled.ConfigValue = 1
$svr.Configuration.IsSQLCLREnabled.ConfigValue = 1
$svr.Configuration.DefaultBackupCompression.ConfigValue = 1
$svr.Configuration.MediaRetention.ConfigValue = 30
$svr.Configuration.MaxDegreeOfParallelism.ConfigValue = $MAXDOP
$svr.Configuration.MinServerMemory.ConfigValue = $SQLMemMin
$svr.Configuration.MaxServerMemory.ConfigValue = $SQLMemMax
$svr.Configuration.Alter()

Write-Host "SQL Server configurations changed.. $Date" -ForegroundColor Green

###################################################################################################
if ( $instancename -eq "MSSQLSERVER")
{ Set-Location SQLSERVER:\SQL\$INSTANCENAME }
else
{ Set-Location SQLSERVER:\SQL\localhost\$INSTANCENAME }

#Alter Model Db
$Date = Get-Date
Invoke-Sqlcmd -Query "USE [master]; ALTER DATABASE Model MODIFY FILE ( NAME = N'modeldev', SIZE = 1024MB, FILEGROWTH = 1024MB )"
Invoke-Sqlcmd -Query "USE [master]; ALTER DATABASE model MODIFY FILE ( NAME = N'modellog', SIZE = 512MB, FILEGROWTH = 512MB )"
Write-Host "Model database updated.. $Date" -ForegroundColor Green

###################################################################################################
#Resotre the AXIS_DBA database
$Date = Get-Date
$RestoreDBSQL = @"
USE [master]; RESTORE DATABASE [$databasename] FROM DISK = N'$folderpath\$databasebakfile' WITH FILE = 1,  
MOVE N'$databasename' TO N'$SQLUSERDBDIR\$databasefile',  
MOVE N'$databaselogname' TO N'$SQLUSERDBLOGDIR\$databaselogfile', 
NOUNLOAD, REPLACE, STATS = 5
"@
Invoke-Sqlcmd -Query $RestoreDBSQL
Write-Host "Axis_DBA database restored.. $Date" -ForegroundColor Green

###################################################################################################
#Run the tsql script "Maintenance Job Script.sql"
<#
$Date = Get-Date
Invoke-Sqlcmd -InputFile "$folderpath\MaintenanceJobScript.sql" | Out-File -FilePath "$folderpath\MaintenanceJobScript.txt"
Write-Host "Executed MaintenanceJobScript.sql Output sent to $folderpath\MaintenanceJobScript.txt" -ForegroundColor Green
#>
###################################################################################################
#Something is wrong in this script####
#Run the tsql script "IndexOptimizerJob.sql"
#Invoke-Sqlcmd -InputFile "$folderpath\IndexOptimizerJob.sql" | Out-File -FilePath "$folderpath\IndexOptimizerJob.txt"
#write-host "Output sent to $folderpath\IndexOptimizerJob.txt".

###################################################################################################
#Enable Service broker
Invoke-Sqlcmd -Query "USE master; ALTER DATABASE msdb SET ENABLE_BROKER WITH ROLLBACK IMMEDIATE;"

###################################################################################################
#Add new Operators to SQL Server
<#
$Date = Get-Date
Invoke-Sqlcmd -InputFile "$folderpath\AddNewOperators.sql" | Out-File -FilePath "$folderpath\AddNewOperators.txt"
Write-Host "Executed AddNewOperators.sql. Output sent to $folderpath\AddNewOperators.txt" -ForegroundColor Green
#>
###################################################################################################
#Set CMDB Access Permissions
$Date = Get-Date
$SetCMDBAccess = @"
USE [master]; 
EXEC('CREATE LOGIN [AXISSPECIALTY\$CMDBLogInCrediential] FROM WINDOWS WITH DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english]');
CREATE USER [AXISSPECIALTY\$CMDBLogInCrediential];
EXEC sp_addrolemember N'db_datareader', N'AXISSPECIALTY\$CMDBLogInCrediential'

USE [msdb];
CREATE USER [AXISSPECIALTY\$CMDBLogInCrediential]
EXEC sp_addrolemember N'db_datareader', N'AXISSPECIALTY\$CMDBLogInCrediential'
"@

Invoke-Sqlcmd $SetCMDBAccess
Write-Host "User created $SetCMDBAccess..$Date" -ForegroundColor Green

###################################################################################################
#SQL Server Errorlog Process
<#
$Date = Get-Date
Invoke-Sqlcmd -InputFile "$folderpath\SQLServerErrorlogCycleProcess.sql" | Out-File -FilePath "$folderpath\SQLServerErrorlogCycleProcess.txt"
Write-Host "Executed SQLServerErrorlogCycleProcess.sql. Output sent to $folderpath\SQLServerErrorlogCycleProcess.txt". -ForegroundColor Green
#>

###################################################################################################
#Configure DB Mail
$Date = Get-Date
Write-Host "Configuring DB mail Started.. $Date" -ForegroundColor Green

#Step 1 - Get the local SQL Server name. 
  [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null
  [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SMO') | Out-Null

#Step 2 - Load the SMO assembly and create the server object, connecting to the server.
  [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SMO') | Out-Null
  $server = New-Object 'Microsoft.SqlServer.Management.SMO.Server' ($svr)

#Step 3 - Configure the SQL Server to enable Database Mail.
  $svr.Configuration.DatabaseMailEnabled.ConfigValue = 1
  $svr.Configuration.Alter()

#Step 4 - Alter mail system parameters if desired, this is an optional step.
  $svr.Mail.ConfigurationValues.Item('LoggingLevel').Value = 1
  $svr.Mail.ConfigurationValues.Item('LoggingLevel').Alter()

#Step 5 - Create the mail account. 
#ArgumentList contains the mail service, account name, description, display name and email address.
  $account = New-Object -TypeName Microsoft.SqlServer.Management.SMO.Mail.MailAccount -Argumentlist $svr.Mail, $accountName, $accountDescription, $accountName, $originatingAddress
  $account.ReplyToAddress = $replyToAddress 
  $account.Create()

[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic') | Out-Null
[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SMO') | Out-Null
$winsvr = New-Object ('Microsoft.SqlServer.Management.Smo.Server') ("(local)")

#Step 6 - Set the mail server now that the account is created.
if ( $instancename -eq "MSSQLSERVER")
{ $sqlServer02 = ("$winsvr") }
else
{ $sqlServer02 = ("$winsvr\$instancename") }

$sqlServer02 = ("$sqlServer02").Replace("[","")
$sqlServer02 = ("$sqlServer02").Replace("]","")

  $account.MailServers.Item($sqlServer02).Rename($smtpServer)
  $account.Alter()
  
#Step 7 - Create a public default profile. 
#ArgumentList contains the mail service, profile name and description.
  $mailProfile = New-Object -TypeName Microsoft.SqlServer.Management.SMO.Mail.MailProfile -ArgumentList $svr.Mail, $profileName, $profileDescription
  $mailProfile.Create()

#Step 8 - Associate the account to the profile and set the profile to public
  $mailProfile.AddAccount($accountName, 0)
  $mailProfile.AddPrincipal('public', 1)
  $mailProfile.Alter()

#Step 9 - Configure the SQL Agent to use dbMail.
  $svr.JobServer.AgentMailType = 'DatabaseMail'
  $svr.JobServer.DatabaseMailProfile = $profileName
  $svr.JobServer.Alter()
Write-Host "Configuring DB mail completed.. $Date" -ForegroundColor Green
 
###################################################################################################
#Enable Trace Flags
    #Get SQL Server Instance Path fron the registry:
        $SQLService = "SQL Server ($INSTANCENAME)"; 
        $SQLInstancePath = "";
        $SQLServiceName = ((Get-Service | WHERE { $_.DisplayName -eq $SQLService }).Name).Trim();
        If ($SQLServiceName.contains("`$")) { $SQLServiceName = $SQLServiceName.SubString($SQLServiceName.IndexOf("`$")+1,$SQLServiceName.Length-$SQLServiceName.IndexOf("`$")-1) }     
        foreach ($i in (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server").InstalledInstances)
        {      
          If ( ((Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL").$i).contains($SQLServiceName) ) 
          { $SQLInstancePath = "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\MSSQL15.$INSTANCENAME" }
         } 
    #Read Existing SQL Server Startup Parameter
        (Get-ItemProperty "$SQLInstancePath\MSSQLServer\Parameters" | Select SQLArg* | Format-List | Out-String ).trim() -replace "SQLArg","`tSQLArg"
    #Create New SQL Server Startup Parameters
        $ParamNumber = "3"
        $ParamValue = "-T1117"
        New-ItemProperty -Path "$SQLInstancePath\MSSQLServer\Parameters" -Name ("SQLArg$ParamNumber") -Value $ParamValue -PropertyType String -Force | Out-Null
        $ParamNumber = "4"
        $ParamValue = "-T1118"
        New-ItemProperty -Path "$SQLInstancePath\MSSQLServer\Parameters" -Name ("SQLArg$ParamNumber") -Value $ParamValue -PropertyType String -Force | Out-Null
        $ParamNumber = "5"
        $ParamValue = "-T1222"
        New-ItemProperty -Path "$SQLInstancePath\MSSQLServer\Parameters" -Name ("SQLArg$ParamNumber") -Value $ParamValue -PropertyType String -Force | Out-Null
        $ParamNumber = "6"
        $ParamValue = "-T2371"
        New-ItemProperty -Path "$SQLInstancePath\MSSQLServer\Parameters" -Name ("SQLArg$ParamNumber") -Value $ParamValue -PropertyType String -Force | Out-Null
        $ParamNumber = "7"
        $ParamValue = "-T3226"
        New-ItemProperty -Path "$SQLInstancePath\MSSQLServer\Parameters" -Name ("SQLArg$ParamNumber") -Value $ParamValue -PropertyType String -Force | Out-Null
        $ParamNumber = "8"
        $ParamValue = "-T4199"
        New-ItemProperty -Path "$SQLInstancePath\MSSQLServer\Parameters" -Name ("SQLArg$ParamNumber") -Value $ParamValue -PropertyType String -Force | Out-Null
        (Get-ItemProperty "$SQLInstancePath\MSSQLServer\Parameters" | Select SQLArg*  | Format-List | Out-String ).trim() -replace "SQLArg","`tSQLArg"

###################################################################################################
#Give the user a chance to review the output messages and quit the install
Write-Host "Please review any error messages above. You are about to install SSMS. Do you want to continue the install? (Y/N) "-ForegroundColor Green
$response = Read-Host
if ( $response -ne "Y" ) { break }

###################################################################################################
#Install SSMS

$Date = Get-Date
$filepath = "$folderpath\$SSMSFileName"
if (!(Test-Path $filepath))
{ Write-Warning "Missing SSMS Installer, Install will continue..." }
else { Write-Host "Installing SQL Server 2019 SSMS $Date" -ForegroundColor Green }

#Start the SQL SSMS installer
$Parms = " /Install /Quiet /Norestart /Logs SQLServerSSMSlog.txt"
$Prms = $Parms.Split(" ")
& "$filepath" $Prms | Out-Null
$Date = Get-Date
Write-Host "done with SSMS.. $Date" -ForegroundColor Green

###################################################################################################
#Exit script
$Date = Get-Date
Write-Host "Please review any error messages above. Exiting script, install completed. Please reboot this server.. $Date" -ForegroundColor Green
Write-Host "Review the Summary.txt file located at C:\Program Files\Microsoft SQL Server\150\Setup Bootstrap\Log" -ForegroundColor Green
